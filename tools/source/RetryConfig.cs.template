/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.Collections.Generic;

/// <summary>
///     Generated by 'aliyun-openapi-net-sdk/tools/convert.js'
///     Please do not modify this file
/// <summary>
namespace Aliyun.Acs.Core.Retry.Util
{
    internal static class RetryConfig
    {
        /// <summary>
        ///     Given the specific product and version and sectionName
        /// </summary>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="sectionName"></param>
        /// <returns>Specific API List</returns>
        public static List<string> GetRetryableApiList(string product, string version, string sectionName)
        {
            if (string.IsNullOrEmpty(product) || string.IsNullOrEmpty(version) || string.IsNullOrEmpty(sectionName))
            {
                return null;
            }

            List<string> retryableApiList = Get(product, version, sectionName);
            return retryableApiList.Count == 0 ? null : retryableApiList;
        }

        private static Dictionary<string, Product> products;

        internal static List<string> Get(string productName, string versionDate, string sectionName)
        {
            if (null == products)
            {
                products = new Dictionary<string, Product>() { };{retry_config_data}
            }
            List<string> apis = new List<string>() { };
            if (products.ContainsKey(productName))
            {
                Product product = products[productName];
                if (product.versions.ContainsKey(versionDate))
                {
                    Version version = product.versions[versionDate];
                    switch (sectionName)
                    {
                        case "RetryableAPIs":
                            apis = version.RetryableAPIs;
                            break;
                        case "RetryableAPIsWithClientToken":
                            apis = version.RetryableAPIsWithClientToken;
                            break;
                        case "RetryableThrottlingErrors":
                            apis = version.RetryableThrottlingErrors;
                            break;
                        case "RetryableNormalErrors":
                            apis = version.RetryableNormalErrors;
                            break;
                    }
                    return apis;
                }
            }
            return apis;
        }
    }

    public class Product
    {
        public string ProductName { get; set; }

        public Dictionary<string, Version> versions = new Dictionary<string, Version>() { };
    }

    public class Version
    {
        public String VersionDate { get; set; }

        public List<string> RetryableAPIs = new List<string>() { };

        public List<string> RetryableAPIsWithClientToken = new List<string>() { };

        public List<string> RetryableThrottlingErrors = new List<string>() { };

        public List<string> RetryableNormalErrors = new List<string>() { };
    }
}
